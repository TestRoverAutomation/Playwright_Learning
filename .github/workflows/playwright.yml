name: Playwright Tests

on:
  push:
    branches-ignore:
      - 'dependabot/**'
      - 'docs/**'
  pull_request:
    branches:
      - '**'
  # schedule:
  #   - cron: '0 4 * * *' # Daily run at 04:00 AM UTC

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.56.1-noble
    timeout-minutes: 60

    steps:
      # 🧾 Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 Node setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      # 📦 Install dependencies
      - name: Install dependencies
        run: npm ci

      # 🌍 Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps  

      # 🧪 Run Playwright tests
      - name: Run Playwright tests
        run: npm run test

      # ☕ Install Java (for Allure)
      - name: Install Java (for Allure)
        run: |
          apt-get update
          apt-get install -y openjdk-11-jre

      # 🧰 Install Allure CLI
      - name: Install Allure CLI globally
        run: |
          npm install -g allure-commandline
          echo "$(npm root -g)/.bin" >> $GITHUB_PATH
          allure --version

      # 🧾 Generate Allure report
      - name: Generate Allure report
        if: success() || failure()
        run: allure generate allure-results --clean -o allure-report

      # 🧮 Sanitize branch name for URLs
      - name: Sanitize branch name
        id: sanitize
        run: |
          RAW_BRANCH="${{ github.head_ref || github.ref_name }}"
          SAFE_BRANCH=$(echo "$RAW_BRANCH" | tr '/: ' '-' | tr -cd '[:alnum:]-_.')
          echo "Sanitized branch name: $SAFE_BRANCH"
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

      # 💾 Upload Allure report artifact
      - name: Upload Allure report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ steps.sanitize.outputs.safe_branch }}
          path: allure-report/
          retention-days: 30

      # 🚀 Deploy Allure report to Netlify
      - name: Deploy Allure report to Netlify
        if: success()
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          SAFE_BRANCH="${{ steps.sanitize.outputs.safe_branch }}"
          echo "Deploying Allure for branch: $SAFE_BRANCH"

          if [ "$SAFE_BRANCH" = "main" ] || [ "$SAFE_BRANCH" = "master" ]; then
            echo "🚀 Deploying production Allure report for $SAFE_BRANCH ..."
            DEPLOY_URL=$(npx netlify deploy --site "$SITE_ID" --prod --dir allure-report | grep -o 'https://[^ ]*')
          else
            echo "🧪 Deploying preview Allure report for branch: $SAFE_BRANCH ..."
            DEPLOY_URL=$(npx netlify deploy --site "$SITE_ID" --alias "$SAFE_BRANCH" --dir allure-report | grep -o 'https://[^ ]*')
          fi

          echo "✅ Allure report deployed at: $DEPLOY_URL"

      # ✅ Generate Cucumber HTML report
      - name: Generate Cucumber HTML report
        if: success()
        run: |
          echo "🧪 Generating Cucumber HTML report..."
          npx ts-node generateReport.ts
          ls -R cucumber-html-report || echo "⚠️ Folder not found"
          echo "✅ Cucumber report generated."

      # 🌐 Deploy Cucumber report to GitHub Pages
      - name: Deploy Cucumber HTML report to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./cucumber-html-report
          destination_dir: cucumber-reports/${{ steps.sanitize.outputs.safe_branch }}

      # 🪶 Log GitHub Pages report URL
      - name: Log deployed Cucumber report URL
        if: success()
        run: |
          echo "✅ Cucumber report deployed at:"
          echo "https://testroverautomation.github.io/Playwright_Learning/cucumber-reports/${{ steps.sanitize.outputs.safe_branch }}/index.html"
